<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MetroExtras"
                    xmlns:mdt="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:exConverters="clr-namespace:MetroExtras.Converters">
    <Style x:Key="ExComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=ActualHeight}"/>
        <Setter Property="Padding" Value="10,3,5,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid>
                        <Border x:Name="Back"
                                Opacity="0.3"/>
                        <mdt:Ripple HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                    Focusable="False"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="White"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="Black"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="mdt:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="Content" Value="{mdt:PackIcon Kind=MenuDown}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid x:Name="root">
                        <Border x:Name="shadow"
                                Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Mode=OneWay, Path=ActualHeight, Converter={x:Static exConverters:ExCommanConverter.Instance},ConverterParameter=0.4}"
                                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Mode=OneWay, Path=ActualWidth, Converter={x:Static exConverters:ExCommanConverter.Instance},ConverterParameter=0.6}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mdt:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}">
                            <Path x:Name="arrow" VerticalAlignment="Stretch" Stretch="Uniform" HorizontalAlignment="Stretch" Fill="{TemplateBinding Foreground}" Data="M 500,500 L 0,0 1000,0 z"/>
                        </Border>
                        <Grid.RenderTransform>
                            <RotateTransform x:Name="rotate" 
                                             Angle="0" 
                                             CenterX="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay, Path=ActualWidth, Converter={x:Static exConverters:ExCommanConverter.Instance},ConverterParameter=0.5}"
                                             CenterY="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay, Path=ActualHeight, Converter={x:Static exConverters:ExCommanConverter.Instance},ConverterParameter=0.5}"/>
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="Rotate">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Unchecked" To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2"
                                                        Storyboard.TargetName="rotate"
                                                        Storyboard.TargetProperty="Angle"
                                                        To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2"
                                                         Storyboard.TargetName="rotate"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="180" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="shadow" Property="mdt:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ExComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" 
                   PopupAnimation="Fade" Placement="Bottom">
                <Border x:Name="dropDownBorder" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=(local:MetroExtraBorderAssist.BorderCornerRadius)}"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                        Opacity="0.85">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}, Path=CornerRadius, Converter={x:Static exConverters:CornerRadiusConvert.GetCornerValue}, ConverterParameter=TopLeft}"/>
                            <RowDefinition/>
                            <RowDefinition Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}, Path=CornerRadius, Converter={x:Static exConverters:CornerRadiusConvert.GetCornerValue}, ConverterParameter=BottomLeft}"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1" VerticalScrollBarVisibility="Hidden">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Continue"/>
                                <!--<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                            </Grid>
                        </ScrollViewer>
                    </Grid>
                </Border>
            </Popup>
            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    CornerRadius="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=(local:MetroExtraBorderAssist.BorderCornerRadius)}"
                    Background="{TemplateBinding Background}"
                    Opacity="0.85">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Border}, Path=CornerRadius, Converter={x:Static exConverters:CornerRadiusConvert.GetCornerValue}, ConverterParameter=TopLeft}"/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton x:Name="toggleButton" 
                                  BorderBrush="{TemplateBinding BorderBrush}" 
                                  Grid.Column="3" 
                                  Foreground="{TemplateBinding Foreground}"
                                  Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Mode=OneWay, Path=ActualHeight}"
                                  Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Mode=OneWay, Path=ActualHeight}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Style="{StaticResource ExComboBoxToggleButton}"/>
                    <Border x:Name="stroke"
                            Width="2"
                            Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Mode=OneWay, Path=ActualHeight, Converter={x:Static exConverters:ExCommanConverter.Instance},ConverterParameter=0.7}"
                            Background="{TemplateBinding Foreground}"
                            mdt:ShadowAssist.ShadowDepth="Depth1"
                            mdt:ShadowAssist.Darken="True"
                            Effect="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(mdt:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                            Grid.Column="2"/>
                    <ContentPresenter x:Name="contentPresenter" 
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      HorizontalAlignment="Left" 
                                      IsHitTestVisible="false" 
                                      Margin="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="Center"
                                      Grid.Column="1"/>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Background" Value="#FF525252"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="MaxDropDownHeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight, Converter={x:Static exConverters:ExCommanConverter.Instance}, ConverterParameter=4}"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ExComboBoxItemStyle}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight, Converter={x:Static exConverters:ExCommanConverter.Instance}, ConverterParameter=0.5}"/>
        <Setter Property="Template" Value="{StaticResource ExComboBoxTemplate}"/>
    </Style>
</ResourceDictionary>